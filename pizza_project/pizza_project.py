from abc import ABC
import click
import numpy as np
from functools import wraps


def log(text: str):
    def decorator(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            time = np.random.randint(1, 30)
            print(text.format(time))
            return func(*args, **kwargs)

        return wrapper

    return decorator


@click.group()
def cli():
    pass


@cli.command()
@click.option('--delivery', default=False, is_flag=True)
@click.argument('pizza', nargs=1)
def order(pizza: str, delivery: bool):
    """–§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞—è –∑–∞ –∑–∞–∫–∞–∑"""
    print(f'üßë‚Äçüç≥ –ü—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏ –∑–∞ {np.random.randint(1, 20)}—Å!')
    if delivery:
        delivery_pizza(pizza)
    else:
        pickup(pizza)


@log('üõµ –î–æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞ {}—Å!')
def delivery_pizza(pizza: str):
    """–§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞—è –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É –ø–∏—Ü—Ü—ã"""
    return None


@log('üè† –ó–∞–±—Ä–∞–ª–∏ –∑–∞ {}—Å!')
def pickup(pizza: str):
    """–§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞—è –∑–∞ —Å–∞–º–æ–≤—ã–≤–æ–∑ –ø–∏—Ü—Ü—ã"""
    return None


@cli.command()
def menu():
    """–í—ã–≤–æ–¥–∏—Ç –º–µ–Ω—é"""

    list_pizza = [Margherita(), Pepperoni(), Hawaiian()]

    for pizza in list_pizza:
        type_pizza = pizza.__class__.__name__
        symbol_pizza = pizza.symbol
        composition_pizza = pizza.dict().keys()
        print(f"- {type_pizza} {symbol_pizza}: {', '.join(composition_pizza)}")


class Pizza(ABC):
    """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å –ø–∏—Ü—Ü—ã"""
    _composition = {}
    _possible_size = ['XL', 'L']

    def __init__(self, size: str = 'L'):
        if size in self._possible_size:
            self._size = size
        else:
            raise TypeError("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –ø–∏—Ü—Ü—ã")

    def dict(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –ø–∏—Ü—Ü—ã"""
        return self._composition

    def __eq__(self, other):
        uniqueness_composition = set(self._composition.keys()) - set(other._composition.keys())
        if uniqueness_composition or self._size != other._size:
            return False
        else:
            return True


class Margherita(Pizza):
    """–ö–ª–∞—Å—Å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞ –ø–∏—Ü—Ü—É –ú–∞—Ä–≥–∞—Ä–∏—Ç—É"""
    _composition = {'tomato sauce': '', 'mozzarella': '', 'tomatoes': ''}
    _symbol = 'üßÄ'

    def __init__(self, size: str = 'L'):
        super().__init__(size)

    @property
    def symbol(self):
        return self._symbol


class Pepperoni(Pizza):
    """–ö–ª–∞—Å—Å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞ –ø–∏—Ü—Ü—É –ü–µ–ø–µ—Ä–æ–Ω–Ω–∏"""
    _composition = {'tomato sauce': '', 'mozzarella': '', 'pepperoni': ''}
    _symbol = 'üçï'

    def __init__(self, size: str = 'L'):
        super().__init__(size)

    @property
    def symbol(self):
        return self._symbol


class Hawaiian(Pizza):
    """–ö–ª–∞—Å—Å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞ –ø–∏—Ü—Ü—É –ì–∞–≤–∞–π—Å–∫—É—é"""
    _composition = {'tomato sauce': '', 'mozzarella': '', 'chicken': '', 'pineapples': ''}
    _symbol = 'üçç'

    def __init__(self, size: str = 'L'):
        super().__init__(size)

    @property
    def symbol(self):
        return self._symbol


if __name__ == "__main__":
    cli()
